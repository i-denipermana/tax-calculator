name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
      next:
        description: "Next version"
        required: false
jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up Java'
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '11'
      - name: 'Cache Maven packages'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Set release version'
        id: version
        run: |
          echo ${{ github.event.inputs.version }}
          RELEASE_VERSION=${{ github.event.inputs.version }}
          NEXT_VERSION=${{ github.event.inputs.next }}
          PLAIN_VERSION=`echo ${RELEASE_VERSION} | awk 'match($0, /^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)/) { print substr($0, RSTART, RLENGTH); }'`
          COMPUTED_NEXT_VERSION="${PLAIN_VERSION}-SNAPSHOT"
          if [ -z $NEXT_VERSION ]
          then
            NEXT_VERSION=$COMPUTED_NEXT_VERSION
          fi
          ./mvnw -B versions:set versions:commit -DnewVersion=$RELEASE_VERSION
          git config --global user.name "GitHub Action"
          git commit -a -m "🏁 Releasing version $RELEASE_VERSION"
          git push
          echo "removed: origin HEAD:master"
          git rev-parse HEAD > HEAD
          echo $RELEASE_VERSION > RELEASE_VERSION
          echo $PLAIN_VERSION > PLAIN_VERSION
          echo $NEXT_VERSION > NEXT_VERSION
      - name: 'Upload version files'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            HEAD
            *_VERSION
  build:
    needs: [ version ]
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        gu-binary: [ gu, gu.cmd ]
        exclude:
          # Exclude GraalVM native image builds
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          - os: windows-latest
            gu-binary: gu
          # Temporarily excluding builds for testing
          # TODO: Remove this exclusion once we have native image builds for all platforms
    #          - os: ubuntu-latest
    #            gu-binary: gu
    #          - os: macos-latest
    #            gu-binary: gu
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Read HEAD ref'
        id: head
        uses: juliangruber/read-file-action@v1
        with:
          path: artifacts/HEAD

      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.head.outputs.content }}

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: 'Set up Graal'
        uses: DeLaGuardo/setup-graalvm@5.0
        with:
          graalvm: '21.3.0'
          java: 'java11'

      - name: 'Install native-image component'
        run: |
          ${{ matrix.gu-binary }} install native-image
      - name: 'Cache Maven packages'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Build Native Image'
        run: ./mvnw -B --file pom.xml -Pnative package

      - name: 'Create distribution'
        run: ./mvnw -B --file pom.xml -Pdist package -DskipTests

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            target/*.zip
            target/*.tar.gz